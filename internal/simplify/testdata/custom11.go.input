package demo

import (
	"fmt"
	"log"
	"os"
)

func doPrintf() {
	fmt.Printf("abc")
	fmt.Printf("%s", "abc")
	fmt.Printf("%d", 123)
	fmt.Printf("%d", int64(123))
	fmt.Printf("%d", int8(123))
	fmt.Printf("%d", int32(123))
	fmt.Printf("%s", []byte("abc"))
	fmt.Printf(123)
	log.Printf("abc")
	log.Fatalf("abc")
	log.Panicf("abc")
}

func doFxxF() {
	fmt.Fprintf(os.Stderr, "abc")
	fmt.Fprint(os.Stderr, "abc")
}

func doCondXy() {
	_ = ok1() && "a" == "b"
	if ok1() && "a" == "b" {
		print("ok1")
	}

	s1 := ""
	if ok1() || "a" == "b" || s1 == "" || !ok2() {
		print("ok2")
	}

	_ = ok2() && len("s") > 0
	_ = ok2() && len("s") > 0 && len(s1) == 1

	sl1 := []sting{"a"}

	_ = ok2() && len("s") > 0 && len(s1) == 1 && cap(sl1) > 0
}

func ok1() bool {
	return true
}
func ok2() bool {
	return true
}

func yado() {
	var a int
	var b string
	var c string
	var d bool
	
	const cs1 = 1

	_ = 1 == a
	_ = 1 != a
	_ = 1 > a
	_ = 1 >= a
	
	_= cs1 == a

	_ = 1 < a
	_ = 1 <= a

	_ = "a" == b
	_ = c == b

	_ = 1 == a || "a" == c

	_ = true == d
	_ = true != d
	
	_ = false == d
	_ = false != d

	_ = d != true
	_ = true == ok2()
	_ = true != ok2()
	
	_ = false == ok2()
	_ = false != ok2()

	if "hello" == c {
		println("hello")
	}
}
