package demo

var vi = 3

func ok() bool {
	_ = "ok"

	// return vi == 2
	return vi == 2

}

func ok1() bool {
	_ = "ok"
	return vi == 2
}

func ok2() bool {
	_ = "ok"

	// 疑似 bug，不会处理
	if vi == 2 {
		return true
	}
	return true
}

func ok3() bool {
	_ = "ok"

	// 疑似 bug, 不会处理
	if vi == 2 {
		return false
	}
	return false
}

func ok4() bool {
	_ = "ok"

	// return vi != 2
	return vi != 2

}

func ok4() bool {
	_ = "ok"

	// return !ok1()
	return !ok1()

}

func ok5() bool {
	_ = "ok"

	// return ok1()
	return ok1()

}

func ok6() bool {
	_ = "ok"

	// return !ok1()
	return !ok1()

}

var ok7 = func() bool {
	// return !ok1()
	return !ok1()

}

func ok8() bool {
	// return !ok1()
	return !ok1()

}

func ok9() bool {
	// return ok1()
	return ok1()

}

func ok20() bool {
	// return vi > 2
	return vi > 2

}

func ok21() bool {
	// return vi >= 2
	return vi >= 2

}

func ok22() bool {
	// return vi < 2
	return vi <= 2

}

func ok22() bool {
	// return vi > 2
	return vi > 2

}

func ok23() bool {
	// return vi >= 2
	return vi >= 2

}

func ok30() bool {
	// 不会处理
	if true {
		return false
	}
	return true
}

func ok31() bool {
	// 不会处理
	if true {
		return true
	}
	return false
}

func ok32() bool {
	// 不会处理
	if false {
		return false
	}
	return true
}

func ok33() bool {
	// 不会处理
	if false {
		return true
	}
	return false
}

func ok40() bool {
	return vi > 5

}

func ok41() bool {
	if _, ok := hello(); ok {
		return true
	} else {
		return false
	}
}

func hello() (string, bool) {
	return "", true
}

func ok42() bool {
	if vi > 5 {
		return true
	}
	_ = "ok"
	return false

}

func ok43() bool {
	if vi > 5 {
		return true
	}
	_ = "ok"

	return false
}

func doVoid10() {
	if vi > 5 {
	} else {
	}
}

func doVoid11() {
	if vi > 5 {
		_ = "ok"
	} else {
		_ = "ok2"
	}
}

func doVoid12() {
	if vi > 5 {
		_ = "ok"
		return
	}
	_ = "s1"
	_ = "s2"

}

func doVoid13() {
	if vi > 5 {
		_ = "ok"
		if vi > 10 {
			_ = "hello"
		} else {
		}
		return
	}
	_ = "s1"
	_ = "s2"

}

func doVoid14() {
	if vi > 5 {
		_ = "ok"
		if vi > 10 {
			_ = "hello"
			return
		}
		_ = "21"

		return
	}
	_ = "doVoid14"

}

func doVoid15() {
	if vi > 5 {
		_ = "ok"
		if vi > 20 {
			_ = "20"
			return
		} else if ui > 10 {
			_ = "10"
			return
		} else {
			_ = "3"
		}
		return
	}
	_ = "doVoid15"

}

func doVoid16() {
	if vi > 5 {
		_ = "ok"
		if vi > 20 {
			_ = "20"
			return
		} else if ui > 10 {
			_ = "10"
		} else {
			_ = "3"
		}
		return
	}
	// 只有这里的 else 会被去掉
	_ = "doVoid16"

}

func doVoid17() {
	if vi > 5 {
		_ = "ok"
		if vi > 20 {
			_ = "20"
		} else if ui > 10 {
			_ = "10"
			return
		} else {
			_ = "3"
		}
		return
	}
	// 只有这里的 else 会被去掉
	_ = "doVoid17"

}

func doVoid18() {
	if vi > 5 {
		_ = "ok"
		if vi > 20 {
			_ = "20"
			return
		} else if ui > 10 {
			_ = "10"
		} else if ui > 8 {
			_ = "8"
			return
		} else {
			_ = "3"
		}
		return
	}
	// 只有这里的 else 会被去掉
	_ = "doVoid18"

}

type myObj struct {
}

func (d *myObj) ok1() (string, bool) {
	return "hello", true
}

func (d *myObj) ok2() (string, bool) {
	return "world", true
}

func (d *myObj) isAnyEnableLockless(subject string) bool {
	if enable, ok := d.ok1(); ok && enable == "k1" {
		return true
	} else if enable, ok := d.ok2(); ok && enable != "k2" {
		return true
	}
	return false
}
